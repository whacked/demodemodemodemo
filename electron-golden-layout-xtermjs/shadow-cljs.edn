{:source-paths ["src"
                "external/wksymclj/src/cljc"
                "external/wksymclj/src/cljs"
                "external/shadow-cljs-electron-example/src"
                ]
 :dependencies [[org.clojure/core.async "1.1.587"]
                [cider/cider-nrepl "0.16.0-SNAPSHOT"]
                [org.clojars.nenadalm/uri "0.1.2-SNAPSHOT"]
                [reagent "0.9.1"]
                [swiss-arrows "1.0.0" :exclusions [org.clojure]]
                [funcool/promesa "5.1.0"]
                [org.clojure/data.json "1.0.0"]
                [metosin/malli "0.0.1-SNAPSHOT"]
                [metosin/reitit "0.5.1"]
                [camel-snake-kebab "0.4.1"]
                [macchiato/core "0.2.16"]
                [macchiato/hiccups "0.4.1"]
                ;; beware potential conflicts with sente
                [com.taoensso/encore "2.127.0"]
                [com.taoensso/timbre "4.10.0" :exclusions [com.taoensso/encore]]
                [nilenso/wscljs "0.2.0"]
                ]
 
 :dev-http {8080 "target/"}
 :builds {:main {:output-to "app/main.js"
                 :target :node-script
                 :main example.main/main
                 :devtools {:after-load app.main/reload!}}

          ;; ref shadow-cljs-electron-example
          :renderer {:target :browser
                     :output-dir "app/js"
                     :asset-path "js"

                     :modules {:renderer {:entries [app.renderer]}}

                     :devtools {:before-load app.renderer/stop
                                :after-load app.renderer/start}
                     }

          :web-front {:target :browser
                      :output-dir "app/js"
                      :asset-path "js"
                      :modules {:front {:entries [app.webapp-front]}}
                     }

          :web-server {:target :node-script
                       :output-to "app/server.js"
                       :main app.webapp-server/main
                       :devtools {:after-load app.main/reload!}}
          }}

